import sys
from awsglue.transforms import *
from awsglue.utils import getResolvedOptions
from pyspark.context import SparkContext
from pyspark.sql import functions as F
from awsglue.context import GlueContext
from awsglue.dynamicframe import DynamicFrame
from awsglue.job import Job

# Capt os parâmetros
args = getResolvedOptions(sys.argv, ['JOB_NAME', 'S3_INPUT_PATH', 'S3_TARGET_PATH'])

# Config Glue
sc = SparkContext()
glueContext = GlueContext(sc)
spark = glueContext.spark_session
job = Job(glueContext)
job.init(args['JOB_NAME'], args)

# Caminhos de entrada e saída
source_file = args['S3_INPUT_PATH']
target_path = args['S3_TARGET_PATH']

# Leitura dos dados como DynamicFrame
df = glueContext.create_dynamic_frame.from_options(
    connection_type="s3",
    connection_options={"paths": [source_file]},
    format="csv",
    format_options={"withHeader": True}
)

# convert DynamicFrame para DataFrame
df_spark = df.toDF()

# alterar os nomes para MAIUSCULO
df_spark = df_spark.withColumn("nome", F.upper(df_spark["nome"]))

# contag de linhas no DataFrame
print("Número total de linhas:", df_spark.count())

# conta de nomes agrupados por ano e sexo
df_grouped = df_spark.groupBy("ano", "sexo").count()
df_grouped.show()

# ordenar os dados pelo ano mais recente primeiro
df_sorted = df_spark.orderBy(F.desc("ano"))
df_sorted.show(5)

# nome feminino com mais registros
most_female_name = df_spark.filter(df_spark["sexo"] == "F").orderBy(F.desc("total")).first()
print(f"Nome feminino mais registrado: {most_female_name['nome']}, Ano: {most_female_name['ano']}")

# nome masculino com mais registros
most_male_name = df_spark.filter(df_spark["sexo"] == "M").orderBy(F.desc("total")).first()
print(f"Nome masculino mais registrado: {most_male_name['nome']}, Ano: {most_male_name['ano']}")

# total de registros por ano (primeiros 10 anos)
df_yearly_total = df_spark.groupBy("ano").agg(F.sum("total").alias("total_registros")).orderBy("ano").limit(10)
df_yearly_total.show()

# Cvrte de volta para DynamicFrame e salvar no S3
dynamic_df = DynamicFrame.fromDF(df_spark, glueContext, "dynamic_df")
glueContext.write_dynamic_frame.from_options(
    frame=dynamic_df,
    connection_type="s3",
    connection_options={
        "path": target_path,
        "partitionKeys": ["sexo", "ano"]
    },
    format="json"
)

job.commit()
